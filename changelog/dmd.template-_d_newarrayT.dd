`_d_newarray{U,T,iT}` are converted to templates

The template `_d_newarrayT` now uses DBI to check what type of initialiser is required by the type of the elements in the array.
Thus it replaces both `_d_newarrayT` and `_d_newarrayiT`.

`_d_newarrayU` is the generic implementation of both of the above hooks and just allocates the array.
It hasn't been incorporated into `_d_newarrayT` because it is used by `dup`.
Currently `dup` is still using the non-template `_d_newarrayU`.
A future PR will update `dup` to use the new template.

Now the compiler performs the following lowering:

---
S[] s = new S[10]

// is now lowered to:
S[] s = _d_newarrayT!S(10);
---

This change adds the new templates to `core.internal.array.construction`.
In addition, it implements template `__arrayClearPad`, `__arrayAlloc`, `__arrayStart` and `__setArrayAllocLength` in `core.internal.array.utils`.
`__arrayClearPad` and `__arrayStart` were also removed from `rt.lifetime`.
The others can't be removed yet because they receive a `TypeInfo` argument and are called by other hooks in `rt.lifetime`.
